const mongoose = require('mongoose')
const requireLogin = require('../middlewares/requireLogin');
const requireCredit = require('../middlewares/requireCredit');
const Survey = mongoose.model('survey');
const Mailer = require('../services/Mailer');

const _ = require('lodash');
const { Path } = require('path-parser');
const { URL } = require('url');

const surveyTemplate = require('../services/emailTemplates/surveyTemplate');
module.exports = (app) => {
    app.get('/api/surveys/:surveyId/:choice', async (res) => {
        res.send('Thanks for voting');
    });
    app.get('/api/surveys', requireLogin, async (req, res) => {

        const surveys = await Survey.find({ _user: req.user.id, deleted: false }).select({
            title: 1,
            subject: 1,
            yes: 1,
            no: 1,
            lastResponded: 1,
            totalRecipients: 1,
            dateSent: 1
        });
        res.send(surveys);
    });
    app.put('/api/surveys', requireLogin, async (req, res) => {
        await Survey.updateOne({
            _id: req.body.surveyId
        }, {
            deleted: true
        }).exec();
        const surveys = await Survey.find({ _user: req.user.id, deleted: false }).select({
            title: 1,
            subject: 1,
            yes: 1,
            no: 1,
            lastResponded: 1,
            totalRecipients: 1,
            dateSent: 1
        });
        res.send(surveys);
    });
    app.post('/api/surveys', requireLogin, requireCredit, async (req, res) => {
        const { title, subject, body, recipients } = req.body;
        const survey = new Survey({
            title,
            subject,
            body,
            recipients: (recipients.split(',').map(email => ({ email: email.trim() }))),
            totalRecipients: (recipients.split(',').length),
            _user: req.user.id,//Id Auto generated by mongoose
            dateSent: Date.now()
        });
        await Mailer(survey, surveyTemplate(survey));
        await survey.save();
        req.user.credits -= 1;
        const user = await req.user.save();
        res.send(user);
    });
    app.post('/api/surveys/webhooks', async (req, res) => {
        _.chain(req.body)
            .map(({ email, url }) => {
                const p = new Path('/api/surveys/:surveyId/:choice');
                const match = p.test((new URL(url)).pathname);
                if (match)
                    return {
                        email: email,
                        surveyId: match.surveyId,
                        choice: match.choice,
                    }
            })
            .compact()
            .uniqBy('email', 'surveyId')
            .each(({ surveyId, email, choice }) => {
                Survey.updateOne({
                    _id: surveyId,
                    recipients: {
                        $elemMatch: { email: email, clicked: false }
                    }
                },
                    {
                        $inc: {
                            [choice]: 1
                        },
                        $set: { 'recipients.$.clicked': true },
                        lastResponded: new Date()
                    }).exec()
            })
            .value();
        res.send({});
    });
}
